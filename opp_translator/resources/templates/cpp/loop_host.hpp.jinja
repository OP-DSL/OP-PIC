{% macro arg_dat_redef(arg) %}
    {% set params -%}
arg{{arg.id}}.dat, {{arg.map_idx}}, arg{{arg.id}}.map, {{lh.dat(arg).dim}}, "{{lh.dat(arg).typ}}", {{arg.access_type.value}}
    {%- endset %}

    {%- if arg is opt -%}
op_opt_arg_dat(arg{{arg.id}}.opt, {{params}})
    {%- else -%}
op_arg_dat({{params}})
    {%- endif %}
{% endmacro -%}

{% macro indirect_dat_descriptor_def() %}
    {% if lh is indirect %}
int num_dats_indirect = {{lh.dats|indirect(lh)|length}};
int dats_indirect[{{lh.args|length}}] = {
        {%- for arg in lh.args -%}
    {{lh.dats|indirect(lh)|index(lh.dat(arg)) if arg is indirect else "-1"}}{{", " if not loop.last}}
        {%- endfor -%}
};
    {% endif %}
{% endmacro %}
{% block prologue %}
{% endblock %}
{% block kernel %}
namespace opp_k{{kernel_idx}} {
{{kernel_func}}
}

{% endblock %}
{% block kernel_wrapper %}
{% endblock %}
{% block host_prologue %}
void opp_par_loop_{{lh.iterate_type}}_{{lh.kernel}}(opp_set set,
    {% for arg in lh.args %}
    opp_arg arg{{arg.id}}{{"," if not loop.last}}
    {% endfor %}
) 
{
    const int nargs = {{lh.args|length}};
    opp_arg args[{{lh.args|length}}];

    {% for arg in lh.args %}
    args[{{loop.index0}}] = {{arg_dat_redef(arg) if lh.args[arg.id] is vec else "arg%d" % arg.id}};
    {% endfor %}

    opp_profiler->start("{{lh.kernel}}");

    if (OPP_DBG) opp_printf("APP", "opp_par_loop_{{lh.iterate_type}}_{{lh.kernel}} set_size %d", set->size);

    {% if lh is injected_loop %}
    opp_mpi_halo_exchanges{{"_grouped" if config.grouped-}}
        (set, nargs, args{{(", %d" % config.device) if config.grouped}});
    opp_mpi_halo_wait_all{{"_grouped" if config.grouped-}}
        (nargs, args{{", 1" if config.grouped}});
        
    const int iter_size = set->diff; 
    const int inj_start = (set->size - set->diff);  
    {% else %}
    const int iter_size = opp_mpi_halo_exchanges{{"_grouped" if config.grouped-}}
        (set, nargs, args{{(", %d" % config.device) if config.grouped}});
    {% if lh is particle_loop %}
    opp_mpi_halo_wait_all{{"_grouped" if config.grouped-}}
        (nargs, args{{", 1" if config.grouped}});    
    {%- endif -%} 
    {% endif %}
    {% if lh is p2c_mapped %}
    OPP_mesh_relation_data = ((OPP_INT *)set->mesh_relation_dat->data); 
    {% endif %}
{% endblock %}
{% block host_loop required %}
{% endblock %}
{% block host_epilogue %}
    opp_profiler->end("{{lh.kernel}}");
{% endblock %}
}


{%- macro arg_to_pointer_dh(arg, lh) %}
    {%- if arg.id == 0 -%}
            (const OPP_REAL*)&point,
    {%- elif arg is gbl %}
        {%- set cast = arg.typ -%}
        ({{cast}} *)args[{{arg.id}}].data{%-if arg.id+1 != lh.args|length-%},{%-endif-%}
    {%- else -%}

        {%- if arg is direct -%}
            {%- set offset = "" -%}
        {%- elif arg is double_indirect -%}
            {%- set offset = " + (map%s[%d] * %d)" % (arg.map_id, arg.map_idx, lh.dat(arg).dim) -%}
        {%- elif arg is indirect -%}
            {%- set offset = " + (temp_ci * %d)" % (lh.dat(arg).dim) -%}
        {%- endif -%}

        {# 0 is OP.AccessType.READ #}
        {%- if arg.access_type.value == 0 -%} 
            (const {{lh.dat(arg).typ}} *)args[{{arg.id}}].data{{offset}}{%-if arg.id+1 != lh.args|length-%},{%-endif%} // {% if arg is dat -%}{{lh.dat(arg).ptr}} {%- endif -%} | OPP_{{arg.access_type.name}}
        {%- else -%}
            arg{{arg.id}}_temp{%-if arg.id+1 != lh.args|length-%},{%-endif%} // {% if arg is dat -%}{{lh.dat(arg).ptr}} {%- endif -%} | OPP_{{arg.access_type.name}}
        {%- endif -%}
    {%- endif -%}
{%- endmacro -%}

{% macro init_dh(lh, kernel_idx, is_omp) %}

// ----------------------------------------------------------------------------
inline void gen_dh_structured_mesh(opp_set set, const opp_dat c_gbl_id, opp_map c2c_map,
        const int nargs, opp_arg* args) { 

    if (OPP_rank == 0)            
        opp_printf("APP", "gen_dh_structured_mesh START cells [%s] global grid dims %zu %zu %zu",
            set->name, cellMapper->globalGridDimsX, cellMapper->globalGridDimsY, cellMapper->globalGridDimsZ);

    const int set_size_inc_halo = set->size + set->exec_size + set->nonexec_size;
    if (set_size_inc_halo <= 0) {
        opp_printf("APP", "Error... set_size_inc_halo <= 0 for set %s", set->name);
        opp_abort("Error... APP set_size_inc_halo <= 0");
    }

    {% if is_omp %}
        {% set prefix1="OPP_INT* "%}
        {% set prefix2="char "%}
        {% set prefix3="bool "%}
    {% endif %}

    std::map<size_t, opp_point> removed_coords;
    const opp_point& min_glb_coords = boundingBox->getGlobalMin();
    const opp_point& maxCoordinate = boundingBox->getLocalMax(); // required for GET_VERT define
    {{prefix3}}opp_move_hop_iter_one_flag = true;

    // lambda function for dh mesh search loop
    auto all_cell_checker = [&](const opp_point& point, int& cid) {          
    {% for arg in lh.args|dat %}
        {% if arg.access_type.value in [1, 3, 4, 5, 2] %} 
        // we dont want to change the original arrays during dh mesh generation, hence duplicate except OPP_READ
        {{lh.dat(arg).typ}} arg{{arg.id}}_temp[{{lh.dat(arg).dim}}];
        {%- endif %}
    {%- endfor +%}

        for (int ci = 0; ci < set->size; ++ci) {
            {{prefix2}}opp_move_status_flag = OPP_NEED_MOVE;  

            int temp_ci = ci; // we dont want to get iterating ci changed within the kernel, hence get a copy
            
            {{prefix1}}opp_p2c = &(temp_ci);           
            {{prefix1}}opp_c2c = &((c2c_map->map)[temp_ci * {{lh.c2c_map.dim}}]);
    
    {% if lh is indirect %}
        {% for map in lh.maps %}
            const OPP_INT *map{{map.id}} = args[{{map.arg_id}}].map_data + (temp_ci * {{map.dim}});
        {%- endfor %}   
    {%- endif %}    
    {%- for arg in lh.args|dat %}
        {% if arg.access_type.value == 2 %} 

            {%- if arg is double_indirect -%}
            {%- set offset = " + (map%s[%d] * %d)" % (arg.map_id, arg.map_idx, lh.dat(arg).dim) -%}
            {%- elif arg is indirect -%}
            {%- set offset = " + (temp_ci * %d)" % (lh.dat(arg).dim) -%}
            {%- endif %}
            // arg{{arg.id}} is OPP_RW, hence get a copy just incase
            std::memcpy(&arg{{arg.id}}_temp, ({{lh.dat(arg).typ}} *)args[{{arg.id}}].data{{offset}}, (sizeof({{lh.dat(arg).typ}}) * {{lh.dat(arg).dim}}));
        {% endif %}
    {%- endfor %}

            opp_k{{kernel_idx}}::{{lh.kernel}}(
    {% if is_omp %}
                opp_move_status_flag, opp_move_hop_iter_one_flag, opp_c2c, opp_p2c, 
    {% endif %}
    {% for arg in lh.args %}
                {{arg_to_pointer_dh(arg,lh)}}
    {% endfor %}
            );
            if (opp_move_status_flag == OPP_MOVE_DONE) {       
                cid = temp_ci;
                break;
            }
        }
    };

    cellMapper->createStructMeshMappingArrays();

    // Step 1 : Get centroids of the structured mesh cells and try to relate them to unstructured mesh indices
    if (OPP_rank == 0) opp_printf("APP", "gen_dh_structured_mesh Step 1 Start");
    opp_profiler->start("Setup_Mover_s1");
    double x = 0.0, y = 0.0, z = 0.0;
    
    {% if is_omp %}
    #pragma omp parallel for private(x, y, z)
    {% endif %}
    for (size_t dz = cellMapper->localGridStart.z; dz < cellMapper->localGridEnd.z; dz++) {       
        z = min_glb_coords.z + dz * cellMapper->gridSpacing;        
        for (size_t dy = cellMapper->localGridStart.y; dy < cellMapper->localGridEnd.y; dy++) {            
            y = min_glb_coords.y + dy * cellMapper->gridSpacing;           
            for (size_t dx = cellMapper->localGridStart.x; dx < cellMapper->localGridEnd.x; dx++) {                
                x = min_glb_coords.x + dx * cellMapper->gridSpacing;               
                
                size_t index = (dx + dy * cellMapper->globalGridDimsX + dz * cellMapper->globalGridDimsXY); 

                const opp_point centroid = cellMapper->getCentroidOfBox(opp_point(x, y ,z));
                int cid = MAX_CELL_INDEX;

                all_cell_checker(centroid, cid); // Find in which cell this centroid lies

                if (cid == MAX_CELL_INDEX) {
    {% if is_omp %}
                    #pragma omp critical
                    {
                        removed_coords.insert(std::make_pair(index, opp_point(x, y ,z)));
                    }
    {% else %}
                    removed_coords.insert(std::make_pair(index, opp_point(x, y ,z)));
    {% endif %}
                }
                else if (cid < set->size) { // write only if the structured cell belong to the current MPI rank                    
                    cellMapper->enrichStructuredMesh(index, ((int*)c_gbl_id->data)[cid], OPP_rank);
                }
            }
        }
    }
    opp_profiler->end("Setup_Mover_s1");

    // Step 2 : For MPI, get the inter-node values reduced to the structured mesh
    if (OPP_rank == 0) opp_printf("APP", "gen_dh_structured_mesh Step 2 Start");
    opp_profiler->start("Setup_Mover_s2");
#ifdef USE_MPI
    cellMapper->reduceInterNodeMappings(1);

    // The marked structured cells from this rank might be filled by another rank, so if already filled, 
    // no need to recalculate from current rank
    for (auto it = removed_coords.begin(); it != removed_coords.end(); ) {
        size_t removed_idx = it->first;
        if (cellMapper->structMeshToRankMapping[removed_idx] != MAX_CELL_INDEX) {
            it = removed_coords.erase(it); // This structured index is already written by another rank
            // opp_printf("APP", "index %zu already in %d", this->structMeshToRankMapping[removed_idx], removed_idx);
        } 
        else {
            ++it;
        } 
    }

    cellMapper->waitBarrier();    
#endif
    opp_profiler->end("Setup_Mover_s2");

    // Step 3 : Iterate over NEED_REMOVE points, Check whether atleast one vertex of the structured mesh is within 
    //          an unstructured mesh cell. If multiple are found, get the minimum cell index to match with MPI
    if (OPP_rank == 0) opp_printf("APP", "gen_dh_structured_mesh Step 3 Start");
    opp_profiler->start("Setup_Mover_s3");
    {% if is_omp %}
    std::vector<size_t> removed_coords_keys;
    removed_coords_keys.reserve(removed_coords.size());
    for (const auto& pair : removed_coords)
        removed_coords_keys.push_back(pair.first);

    std::vector<std::vector<std::pair<int, int>>> tmp_add_per_thr;
    tmp_add_per_thr.resize(opp_nthreads);

    #pragma omp parallel for
    for (int thr = 0; thr < opp_nthreads; thr++)
    {
        const size_t start  = (removed_coords_keys.size() * thr) / opp_nthreads;
        const size_t finish = (removed_coords_keys.size() * (thr+1)) / opp_nthreads;
      
        for (size_t i = start; i < finish; i++)
        {

        const size_t index = removed_coords_keys[i];
        opp_point& p = removed_coords[index];
        double &x = p.x, &y = p.y, &z = p.z;
    {% else %}
    for (auto& p : removed_coords) {

        const size_t index = p.first;
        double &x = p.second.x, &y = p.second.y, &z = p.second.z;
    {% endif %}
        
        const double gs = cellMapper->gridSpacing;
        int most_suitable_cid = MAX_CELL_INDEX, most_suitable_gbl_cid = MAX_CELL_INDEX;

    {% if lh.dat(lh.args[0]).dim == 2 -%}
        {%- set vert_count = 4 -%}
    {%- else -%}
        {%- set vert_count = 8 -%}
    {%- endif %}
        std::array<opp_point,{{vert_count}}> vertices = {
            opp_point(GET_VERT(x,x),    GET_VERT(y,y),    GET_VERT(z,z)),
            opp_point(GET_VERT(x,x),    GET_VERT(y,y+gs), GET_VERT(z,z)),
            opp_point(GET_VERT(x,x+gs), GET_VERT(y,y),    GET_VERT(z,z)),
            opp_point(GET_VERT(x,x+gs), GET_VERT(y,y+gs), GET_VERT(z,z)),
    {%- if vert_count == 8 %}       
            opp_point(GET_VERT(x,x),    GET_VERT(y,y),    GET_VERT(z,z+gs)),
            opp_point(GET_VERT(x,x),    GET_VERT(y,y+gs), GET_VERT(z,z+gs)),
            opp_point(GET_VERT(x,x+gs), GET_VERT(y,y),    GET_VERT(z,z+gs)),
            opp_point(GET_VERT(x,x+gs), GET_VERT(y,y+gs), GET_VERT(z,z+gs)),
    {% endif +%}
        };

        for (const auto& point : vertices) {
            int cid = MAX_CELL_INDEX;

            all_cell_checker(point, cid);

            if ((cid != MAX_CELL_INDEX) && (cid < set->size)) { 
                const int gbl_cid = ((OPP_INT*)c_gbl_id->data)[cid];
                if (most_suitable_gbl_cid > gbl_cid) {
                    most_suitable_gbl_cid = gbl_cid;
                    most_suitable_cid = cid;
                }
            }
        }    

        // Allow neighbours to write on-behalf of the current rank, to reduce issues
    {% if not is_omp %}
        cellMapper->lockWindows();
    {% endif %}
        const int avail_gbl_cid = cellMapper->structMeshToCellMapping[index]; 
        if ((most_suitable_gbl_cid != MAX_CELL_INDEX) && (most_suitable_gbl_cid < avail_gbl_cid) && 
                    (most_suitable_cid < set->size)) {
    {%- if is_omp %}
            tmp_add_per_thr[thr].push_back(std::make_pair(index, most_suitable_gbl_cid));
    {%- else %}        
            cellMapper->enrichStructuredMesh(index, most_suitable_gbl_cid, OPP_rank);
    {%- endif %}      
        }
    {% if not is_omp %}
        cellMapper->unlockWindows();
    {% else %}
        }
    {% endif %}
    }
    {% if is_omp %}
    
    cellMapper->lockWindows();
    for (auto& thread_vec : tmp_add_per_thr) {
        for (auto& thread_data : thread_vec) {       
            cellMapper->enrichStructuredMesh(thread_data.first, thread_data.second, OPP_rank);   
        }
    }
    cellMapper->unlockWindows();
    {% endif %}
    opp_profiler->end("Setup_Mover_s3");

    // Step 4 : For MPI, get the inter-node values reduced to the structured mesh
    if (OPP_rank == 0) opp_printf("APP", "gen_dh_structured_mesh Step 4 Start");
    opp_profiler->start("Setup_Mover_s4");
#ifdef USE_MPI
    cellMapper->reduceInterNodeMappings(2);
#endif
    opp_profiler->end("Setup_Mover_s4");

    // Step 5 : For MPI, convert the global cell coordinates to rank local coordinates for increased performance
    if (OPP_rank == 0) opp_printf("APP", "gen_dh_structured_mesh Step 5 Start");
    opp_profiler->start("Setup_Mover_s5");
#ifdef USE_MPI
    cellMapper->convertToLocalMappings(c_gbl_id);
#endif
    opp_profiler->end("Setup_Mover_s5");

    if (OPP_rank == 0) opp_printf("APP", "gen_dh_structured_mesh DONE");
}

void opp_init_direct_hop_cg(double grid_spacing, int dim, const opp_dat c_gbl_id, const opp::BoundingBox& b_box, 
    opp_map c2c_map, opp_map p2c_map,
    {% for arg in lh.args %}
    opp_arg arg{{arg.id}}{{"," if not loop.last}} // {% if arg is dat %}{{lh.dat(arg).ptr}} {% endif -%} | OPP_{{arg.access_type.name}}
    {% endfor %}
) {
    opp_profiler->start("Setup_Mover");
    
    useGlobalMove = opp_params->get<OPP_BOOL>("opp_global_move");

    if (useGlobalMove) {

        const int nargs = {{lh.args|length}};
        opp_arg args[nargs];

        {% for arg in lh.args %}
        args[{{loop.index0}}] = {{arg_dat_redef(arg) if lh.args[arg.id] is vec else "arg%d" % arg.id}};
        {% endfor %}

#ifdef USE_MPI
        opp_mpi_halo_exchanges(c_gbl_id->set, nargs, args);

        comm = std::make_shared<opp::Comm>(MPI_COMM_WORLD);
        globalMover = std::make_unique<opp::GlobalParticleMover>(comm->comm_parent);

        opp_mpi_halo_wait_all(nargs, args);
#endif

        boundingBox = std::make_shared<opp::BoundingBox>(b_box);
        cellMapper = std::make_shared<opp::CellMapper>(boundingBox, grid_spacing, comm);

        gen_dh_structured_mesh(c_gbl_id->set, c_gbl_id, c2c_map, nargs, args);

        opp_profiler->reg("GlbToLocal");
        opp_profiler->reg("GblMv_Move");
        opp_profiler->reg("GblMv_AllMv");
    }

    opp_profiler->end("Setup_Mover");
}
{% endmacro %}

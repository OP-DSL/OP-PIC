{% extends "cpp/loop_host.hpp.jinja" %}

{% block kernel %}

namespace opp_k{{kernel_idx}} {
{{kernel_func}}
{% if lh is indirect and lh.args|dat|indirect|reduction|length > 0 and config.seg_red %}
// Segmented Reductions Routines 
// --------------------------------------------------------------
__global__ void assign_values( 
    const OPP_INT *__restrict keys,
    const OPP_REAL *__restrict values,
    OPP_REAL *__restrict dat,
    const int start,
    const int end) 
{
    const int tid = threadIdx.x + blockIdx.x * blockDim.x;

    if (tid + start < end) 
    {
        const int n = tid + start;
        const int mapping = keys[n];  
        dat[mapping] += values[n];
    }
}

//--------------------------------------------------------------
__global__ void sequence_OPP_INT_values( 
    OPP_INT *__restrict values,
    const int start,
    const int end) 
{
    const int tid = threadIdx.x + blockIdx.x * blockDim.x;

    if (tid + start < end) 
    {
        const int n = tid + start;
        values[n] = n; 
    }
}

//--------------------------------------------------------------
__global__ void reset_OPP_INT_values( 
    OPP_INT *__restrict values,
    const int start,
    const int end) 
{
    const int tid = threadIdx.x + blockIdx.x * blockDim.x;

    if (tid + start < end) 
    {
        const int n = tid + start;
        values[n] = 0; 
    }
}

//--------------------------------------------------------------
__global__ void reset_OPP_REAL_values( 
    OPP_REAL *__restrict values,
    const int start,
    const int end) 
{
    const int tid = threadIdx.x + blockIdx.x * blockDim.x;

    if (tid + start < end) 
    {
        const int n = tid + start;
        values[n] = 0.0; 
    }
}

//--------------------------------------------------------------
__global__ void assign_values_by_key( 
    const OPP_INT *__restrict indices,
    const OPP_REAL *__restrict values_in,
    OPP_REAL *__restrict values_out,
    const int start, const int end, const int dim) 
{
    const int tid = threadIdx.x + blockIdx.x * blockDim.x;

    if (tid + start < end) 
    {
        const int n = tid + start;
        const int idx = indices[n];

        for (int d = 0; d < dim; d++) {
            values_out[n + d * opp_k2_sr_set_stride_d] = values_in[idx + d * opp_k2_sr_set_stride_d];
        }
    }
}

{% endif %}
}

{% endblock %}

{% macro stride_hip(arg) -%}
{{-" * opp_k%s_dat%s_stride_d" % (kernel_idx, arg.dat_id) if lh.dat(arg) is soa-}}
{%- endmacro %}

{% macro opt_cond(arg) %}
    {%- if arg is opt -%}arg{{arg.id}}.opt{%- endif -%}
{% endmacro %}

{% macro opt_cond_comp(arg) %}
    {%- if arg is opt -%}{{opt_cond(arg)}} && {% endif -%}
{% endmacro %}

{% macro opt_tern(arg, alt = "NULL") %}
    {%- if arg is opt -%}{{opt_cond(arg)}} ? {{caller()}} : {{alt}}{%- else -%}{{caller()}}{%- endif -%}
{% endmacro %}

{% macro opt_if(arg) %}
    {% if arg is opt %}
    if ({{opt_cond(arg)}}) {
    {{caller()|indent-}}
    {{"}"|indent(first = true)}}
    {% else %}
{{caller()-}}
    {% endif %}
{% endmacro %}

{% macro opt_hip_cond(arg) %}
    {%- if arg is opt -%}optflags & 1 << {{lh.optIdx(arg)}}{%- endif -%}
{% endmacro %}

{% macro opt_hip_cond_comp(arg) %}
    {%- if arg is opt -%}{{opt_hip_cond(arg)}} && {% endif -%}
{% endmacro %}

{% macro opt_hip_tern(arg, alt = "NULL") %}
    {%- if arg is opt -%}{{opt_hip_cond(arg)}} ? {{caller()}} : {{alt}}{%- else -%}{{caller()}}{%- endif -%}
{% endmacro %}

{% macro opt_hip_if(arg) %}
    {% if arg is opt %}
    if ({{opt_hip_cond(arg)}}) {
    {{caller()|indent-}}
    {{"}"|indent(first = true)}}
    {% else %}
{{caller()-}}
    {% endif %}
{% endmacro %}

{% macro map_lookup(arg, kernel_idx = '') -%}
{%- if arg is double_indirect -%}
map{{arg.map_id}}[opp_k{{kernel_idx}}_map{{lh.map(arg).id}}_stride_d * {{arg.map_idx}} + p2c]
    {{-(" * %d" % lh.dat(arg).dim) if lh.dat(arg) is not soa}}
{%- elif arg is p2c_mapped -%}
p2c
    {{-(" * %d" % lh.dat(arg).dim) if lh.dat(arg) is not soa}}
{%- else -%}
map{{arg.map_id}}[opp_k{{kernel_idx}}_map{{lh.map(arg).id}}_stride_d * {{arg.map_idx}} + n]
    {{-(" * %d" % lh.dat(arg).dim) if lh.dat(arg) is not soa}}
{%- endif -%}    
{%- endmacro %}

{% macro arg_to_pointer_hip(arg) -%}

    {%- if arg is gbl %}
        {% if arg is reduction %}
gbl{{arg.id}}{{"_local"}}
        {%- else -%}
        {%- set cast = arg.typ -%}
gbl{{arg.id}}
        {%- endif -%}
    {%- else -%}
        {%- set cast = lh.dat(arg).typ -%}
        
        {%- if arg is direct -%}
            {%- if lh is injected_loop -%}
            {%- set offset = " + (inj_start + n)" -%}
            {%- else -%}
            {%- set offset = " + n" -%}
            {%- endif -%}
            dat{{lh.dat(arg).id}}{{offset}}
        {%- else -%}
            {%- if arg is reduction -%}
                {%- if arg is p2c_mapped and not double_indirect -%}
            arg{{arg.id}}_p2c_local
                {%- else -%}
            arg{{arg.id}}_{{arg.map_idx}}_local
                {%- endif -%}
            {%- else -%}
                {%- if arg is double_indirect -%}
            {%- set offset = " + map%s[p2c + opp_k%d_map%d_stride_d * %d]" % (arg.map_id, kernel_idx, arg.map_id, arg.map_idx) -%}
                {%- elif arg is p2c_mapped -%}
            {%- set offset = " + p2c" -%}
                {%- elif arg is indirect -%}
            {%- set offset = " + map%s[n + opp_k%d_map%d_stride_d * %d]" % (arg.map_id, kernel_idx, lh.map(arg).id, arg.map_idx) -%}
                {%- endif -%}
                dat{{lh.dat(arg).id}}{{offset}}
            {%- endif -%}
        {%- endif -%}         
    {%- endif -%}
{%- endmacro %}

{% block prologue %}
{{super()}}
    {% for dat in lh.dats|soa %}
OPP_INT opp_k{{kernel_idx}}_dat{{dat.id}}_stride = -1;
    {% endfor %}
    {% for map in lh.maps %}
OPP_INT opp_k{{kernel_idx}}_map{{map.id}}_stride = -1;
    {% endfor %}
OPP_INT opp_k{{kernel_idx}}_c2c_map_stride = -1;

    {% for dat in lh.dats|soa %}
__constant__ OPP_INT opp_k{{kernel_idx}}_dat{{dat.id}}_stride_d;
    {% endfor %}
    {% for map in lh.maps %}
__constant__ OPP_INT opp_k{{kernel_idx}}_map{{map.id}}_stride_d;
    {% endfor %}
__constant__ OPP_INT opp_k{{kernel_idx}}_c2c_map_stride_d;

    {% if lh is indirect and lh.args|dat|indirect|reduction|length > 0 and config.seg_red %}
// Segmented Reductions Structures 
// --------------------------------------------------------------
OPP_INT opp_k{{kernel_idx}}_sr_set_stride = -1;
__constant__ OPP_INT opp_k{{kernel_idx}}_sr_set_stride_d;
    {% endif%}

    {% for arg in lh.args|dat|indirect|reduction|not_already_mapped(lh) if config.seg_red %}
thrust::device_vector<OPP_INT> sr_dat{{lh.dat(arg).id}}_keys_dv;
thrust::device_vector<{{lh.dat(arg).typ}}> sr_dat{{lh.dat(arg).id}}_values_dv;

thrust::device_vector<OPP_INT> sr_dat{{lh.dat(arg).id}}_keys_dv2;
thrust::device_vector<{{lh.dat(arg).typ}}> sr_dat{{lh.dat(arg).id}}_values_dv2;
// --------------------------------------------------------------
    {% endfor %}
{% endblock %}

{% macro atomic_kernel_wrapper() -%}
__global__ void opp_dev_{{lh.kernel}}(
    {{-"\n    const unsigned optflags," if lh.args|opt|length > 0}}
    {% for dat in lh.dats %}
    {{"const " if dat is read_in(lh)}}{{dat.typ}} *__restrict__ dat{{dat.id}},     // {{dat.ptr}}
    {% endfor %}
    OPP_INT *__restrict__ p2c_map,
    const OPP_INT *__restrict__ c2c_map,
    {% for map in lh.maps %}
    const OPP_INT *__restrict__ map{{map.id}},     // {{map.ptr}}
    {% endfor %}
    {% for arg in lh.args|gbl %}
    {{"const " if arg.access_type == OP.AccessType.Read}}{{arg.typ}} *gbl{{arg.id}},
    {% endfor %}
    OPP_INT *__restrict__ particle_remove_count,
    OPP_INT *__restrict__ particle_remove_indices,
    OPP_INT *__restrict__ move_particle_indices,
    OPP_INT *__restrict__ move_cell_indices,
    OPP_INT *__restrict__ move_count,
    const OPP_INT start,
    const OPP_INT end
) 
{
    {% for arg in lh.args|gbl|reduction %}
    {{arg.typ}} gbl{{arg.id}}_local[{{arg.dim}}];
    for (int d = 0; {{opt_hip_cond_comp(arg)}}d < {{arg.dim}}; ++d)
        gbl{{arg.id}}_local[d] = {% if arg is inc -%}
            {{arg.typ}}_ZERO
        {%- else -%}
            gbl{{arg.id}}[blockIdx.x * {{arg.dim}} + d]
        {%- endif -%};

    {% endfor %}
    const int thread_id = threadIdx.x + blockIdx.x * blockDim.x;

    if (thread_id + start < end) {

        const int n = {{"thread_id + start" if config.atomics else "col_reord[thread_id + start]"}};

        OPP_INT *opp_p2c = (p2c_map + n);
        char move_flag = OPP_NEED_MOVE;
        bool iter_one_flag = (OPP_comm_iteration_d > 0) ? false : true;

        {% for arg in lh.args_expanded|dat|indirect|reduction if config.atomics %}
            {% if arg is p2c_mapped and not double_indirect %}
        {{lh.dat(arg).typ}} arg{{arg.id}}_p2c_local[{{lh.dat(arg).dim}}];
            {% else %}
        {{lh.dat(arg).typ}} arg{{arg.id}}_{{arg.map_idx}}_local[{{lh.dat(arg).dim}}];
            {% endif %}

        {% endfor %}
        do
        {
            const OPP_INT p2c = opp_p2c[0]; // get the value here, since the kernel might change it
            const OPP_INT* opp_c2c = c2c_map + p2c;           

        {% for arg in lh.args_expanded|dat|indirect|reduction if config.atomics %}
            for (int d = 0; {{opt_hip_cond_comp(arg)}}d < {{lh.dat(arg).dim}}; ++d)
            {% if arg is p2c_mapped and not double_indirect %}
                arg{{arg.id}}_p2c_local[d] = {{lh.dat(arg).typ}}_ZERO;
            {% else %}
                arg{{arg.id}}_{{arg.map_idx}}_local[d] = {{lh.dat(arg).typ}}_ZERO;
            {% endif %}

        {% endfor %}
            opp_k{{kernel_idx}}::{{lh.kernel}}(
                move_flag, iter_one_flag, opp_c2c, opp_p2c,
                {% for arg in lh.args %}
                {%+ call opt_hip_tern(arg) %}{{arg_to_pointer_hip(arg)}}{% endcall %}{{"," if not loop.last}} // {% if arg is dat %}{{lh.dat(arg).ptr}} {% endif +%}
                {% endfor %}          
            );

        {% for arg in lh.args_expanded|dat|indirect|reduction if config.atomics %}
            for (int d = 0; {{opt_hip_cond_comp(arg)}}d < {{lh.dat(arg).dim}}; ++d)
            {% if arg is p2c_mapped and not double_indirect %}
                atomicAdd(dat{{arg.dat_id}} + {{map_lookup(arg, kernel_idx)}} + (d{{stride_hip(arg)}}), arg{{arg.id}}_p2c_local[d]);
            {% else %}
                atomicAdd(dat{{arg.dat_id}} + {{map_lookup(arg, kernel_idx)}} + (d{{stride_hip(arg)}}), arg{{arg.id}}_{{arg.map_idx}}_local[d]); // TODO: this looks incorrect
            {% endif %}        
        {% endfor %}
        } while (opp_part_check_status_device(move_flag, iter_one_flag, opp_p2c, n, 
            *particle_remove_count, particle_remove_indices, move_particle_indices, 
            move_cell_indices, move_count));        
    }
    {% for arg in lh.args|gbl|reduction %}

    for (int d = 0; {{opt_hip_cond_comp(arg)}}d < {{arg.dim}}; ++d)
        opp_reduction<OPP_{{arg.access_type.name}}>(gbl{{arg.id}} + blockIdx.x * {{arg.dim}} + d, gbl{{arg.id}}_local[d]);
    {% endfor %}
    {{ caller() }}
}
{% endmacro %}

{% macro seg_red_kernel_wrapper() -%}
__global__ void opp_dev_sr_{{lh.kernel}}( // Used for Segmented Reductions
    {% for dat in lh.dats %}
    {{"const " if dat is read_in(lh)}}{{dat.typ}} *__restrict__ dat{{dat.id}},     // {{dat.ptr}}
    {% endfor %}
    OPP_INT *__restrict__ p2c_map,
    const OPP_INT *__restrict__ c2c_map,
    {% for map in lh.maps %}
    const OPP_INT *__restrict__ map{{map.id}},     // {{map.ptr}}
    {% endfor %}
    {% for arg in lh.args|gbl %}
    {{"const " if arg.access_type == OP.AccessType.Read}}{{arg.typ}} *gbl{{arg.id}},
    {% endfor %}
    OPP_INT *__restrict__ particle_remove_count,
    OPP_INT *__restrict__ particle_remove_indices,
    OPP_INT *__restrict__ move_particle_indices,
    OPP_INT *__restrict__ move_cell_indices,
    OPP_INT *__restrict__ move_count,
    {% for dat in lh.dats %}
        {% if dat is indirect_reduction(lh) %}
    {{dat.typ}} *__restrict__ sr_dat{{dat.id}}_values,     // sr values for {{dat.ptr}}
    OPP_INT *__restrict__ sr_dat{{dat.id}}_keys,     // sr keys for {{dat.ptr}}
        {% endif -%}  
    {% endfor %}
    const OPP_INT start,
    const OPP_INT end
) 
{
    const int thread_id = threadIdx.x + blockIdx.x * blockDim.x;

    if (thread_id + start < end) {

        const int n = thread_id + start;

        OPP_INT *opp_p2c = (p2c_map + n);
        char move_flag = OPP_NEED_MOVE;
        bool iter_one_flag = (OPP_comm_iteration_d > 0) ? false : true;
        bool on_old_cell = true;

        {% for arg in lh.args_expanded|dat|indirect|reduction if config.seg_red %}
            {% if arg is p2c_mapped and not double_indirect %}
        {{lh.dat(arg).typ}} arg{{arg.id}}_p2c_local[{{lh.dat(arg).dim}}];
            {% else %}
        {{lh.dat(arg).typ}} arg{{arg.id}}_{{arg.map_idx}}_local[{{lh.dat(arg).dim}}];
            {% endif %}

        {% endfor %}
        do
        {
            const OPP_INT p2c = opp_p2c[0]; // get the value here, since the kernel might change it
            const OPP_INT* opp_c2c = c2c_map + p2c;           

        {% for arg in lh.args_expanded|dat|indirect|reduction if config.seg_red %}
            for (int d = 0; {{opt_hip_cond_comp(arg)}}d < {{lh.dat(arg).dim}}; ++d)
            {% if arg is p2c_mapped and not double_indirect %}
                arg{{arg.id}}_p2c_local[d] = {{lh.dat(arg).typ}}_ZERO;
            {% else %}
                arg{{arg.id}}_{{arg.map_idx}}_local[d] = {{lh.dat(arg).typ}}_ZERO;
            {% endif %}

        {% endfor %}
            opp_k{{kernel_idx}}::{{lh.kernel}}(
                move_flag, iter_one_flag, opp_c2c, opp_p2c,
                {% for arg in lh.args %}
                {%+ call opt_hip_tern(arg) %}{{arg_to_pointer_hip(arg)}}{% endcall %}{{"," if not loop.last}} // {% if arg is dat %}{{lh.dat(arg).ptr}} {% endif +%}
                {% endfor %}          
            );

        {% for arg in lh.args_expanded|dat|indirect|reduction if config.seg_red %}
            if (on_old_cell)
            {
                int offset = 0;
                for (int d = 0; d < {{lh.dat(arg).dim}}; ++d, ++offset) {
                    sr_dat{{arg.dat_id}}_values[n + opp_k{{kernel_idx}}_sr_set_stride_d * offset] = arg{{arg.dat_id}}_p2c_local[d];              
                }
                sr_dat{{arg.dat_id}}_keys[n] = p2c; // TODO : Generate for double indirections too!
            }
            else
            {
                for (int d = 0; {{opt_hip_cond_comp(arg)}}d < {{lh.dat(arg).dim}}; ++d)
            {% if arg is p2c_mapped and not double_indirect %}
                    atomicAdd(dat{{arg.dat_id}} + {{map_lookup(arg, kernel_idx)}} + (d{{stride_hip(arg)}}), arg{{arg.id}}_p2c_local[d]);
            {% else %}
                    atomicAdd(dat{{arg.dat_id}} + {{map_lookup(arg, kernel_idx)}} + (d{{stride_hip(arg)}}), arg{{arg.id}}_{{arg.map_idx}}_local[d]); // TODO: this looks incorrect
            {% endif %}
            }

            on_old_cell = false;
        
        {% endfor %}
        } while (opp_part_check_status_device(move_flag, iter_one_flag, opp_p2c, n, 
            *particle_remove_count, particle_remove_indices, move_particle_indices, 
            move_cell_indices, move_count));        
    }
    {{ caller() }}
}
{% endmacro %}

{% block kernel_wrapper %}
    {% if lh is direct or config.atomics %}
//--------------------------------------------------------------
        {% call atomic_kernel_wrapper() %}
        {% endcall %}
    {% endif %}

//--------------------------------------------------------------
    {% if lh is indirect and lh.args|dat|indirect|reduction|length > 0 and config.seg_red %}
        {% call seg_red_kernel_wrapper() %}
        {% endcall %}
    {% endif %}

{% endblock %}

{% block host_prologue_early_exit_cleanup %}
        opp_set_dirtybit_grouped(nargs, args, Device_GPU);
        OPP_DEVICE_SYNCHRONIZE();   
{% endblock %}

{% block host_prologue %}
void opp_particle_move__{{lh.kernel}}(opp_set set, opp_map c2c_map, opp_map p2c_map,
    {% for arg in lh.args %}
    opp_arg arg{{arg.id}}{{"," if not loop.last}}   // {% if arg is dat %}{{lh.dat(arg).ptr}} {% endif -%} | OPP_{{arg.access_type.name}}
    {% endfor %}
) 
{
    if (OPP_DBG) opp_printf("APP", "opp_particle_move__{{lh.kernel}} set_size %d", set->size);

    opp_profiler->start("{{lh.kernel}}");

    const int nargs = {{lh.args|length + 1}};
    opp_arg args[nargs];

    {% for arg in lh.args %}
    args[{{loop.index0}}] = {{arg_dat_redef(arg) if lh.args[arg.id] is vec else "arg%d" % arg.id}};
    {% endfor %}
    args[{{lh.args|length}}] = opp_arg_dat(p2c_map->p2c_dat, OPP_RW); // required to make dirty or should manually make it dirty

    const int iter_size = opp_mpi_halo_exchanges_grouped(set, nargs, args, Device_GPU);
    {% if lh is double_indirect_reduc %}

#ifdef USE_MPI
    opp_init_double_indirect_reductions_device(nargs, args);
#endif
    {% endif %}

    const OPP_INT c2c_stride = c2c_map->from->size + c2c_map->from->exec_size + c2c_map->from->nonexec_size;

    opp_mem::dev_copy_to_symbol<OPP_INT>(OPP_cells_set_size_d, &OPP_cells_set_size, &(set->cells_set->size), 1);
    opp_mem::dev_copy_to_symbol<OPP_INT>(opp_k{{kernel_idx}}_c2c_map_stride_d, &opp_k{{kernel_idx}}_c2c_map_stride, &c2c_stride, 1);

    opp_mpi_halo_wait_all(nargs, args);
    {% if lh.args|opt|length > 0 %}
    unsigned optflags = 0;

    {% for arg in lh.args|opt %}
        {% call opt_if(arg) %}
    optflags |= 1 << {{lh.optIdx(arg)}};
        {% endcall %}

    {% endfor %}
    {% endif %}
    {% for arg in lh.args|gbl %}
    {{arg.typ}} *arg{{arg.id}}_host_data = ({{arg.typ}} *)args[{{arg.id}}].data;{{"\n" if loop.last}}
    {% endfor %}
    {% if lh.args|gbl|read_or_write|length > 0 %}
    int const_bytes = 0;

        {% for arg in lh.args|gbl|read_or_write %}
            {% call opt_if(arg) %}
    const_bytes += ROUND_UP({{arg.dim}} * sizeof({{arg.typ}}));
            {% endcall %}
        {% endfor %}

    opp_reallocConstArrays(const_bytes);
    const_bytes = 0;

        {% for arg in lh.args|gbl|read_or_write %}
            {% call opt_if(arg) %}
    args[{{arg.id}}].data   = OPP_consts_h + const_bytes;
    args[{{arg.id}}].data_d = OPP_consts_d + const_bytes;

    for (int d = 0; d < {{arg.dim}}; ++d)
        (({{arg.typ}} *)args[{{arg.id}}].data)[d] = arg{{arg.id}}_host_data[d];

    const_bytes += ROUND_UP({{arg.dim}} * sizeof({{arg.typ}}));
            {% endcall %}

        {% endfor %}
    opp_mvConstArraysToDevice(const_bytes);

    {% endif %}

#ifdef OPP_BLOCK_SIZE_{{kernel_idx}}
    const int block_size = OPP_BLOCK_SIZE_{{kernel_idx}};
#else
    const int block_size = OPP_gpu_threads_per_block;
#endif

    int num_blocks = 200;

    do 
    {
        {% for dat in lh.dats|soa %}
        opp_mem::dev_copy_to_symbol<OPP_INT>(opp_k{{kernel_idx}}_dat{{dat.id}}_stride_d, &opp_k{{kernel_idx}}_dat{{dat.id}}_stride, &(args[{{dat.arg_id}}].dat->set->set_capacity), 1);
        {% endfor %}
        {% for map in lh.maps %}
        opp_mem::dev_copy_to_symbol<OPP_INT>(opp_k{{kernel_idx}}_map{{map.id}}_stride_d, &opp_k{{kernel_idx}}_map{{map.id}}_stride, &(args[{{map.arg_id}}].size), 1);
        {% endfor %}

        opp_init_particle_move(set, nargs, args);
        opp_mem::dev_copy_to_symbol<OPP_INT>(OPP_comm_iteration_d, &OPP_comm_iteration, 1);

    {% if lh.args|gbl|reduction|length > 0 %}
        {% if lh is direct %}
    int max_blocks = num_blocks;
        {% elif config.atomics %}
    int max_blocks = (MAX(set->core_size, set->size + set->exec_size - set->core_size) - 1) / block_size + 1;
        {% else %}
    int max_blocks = 0;
    for (int col = 0; col < plan->ncolors; ++col)
        max_blocks = MAX(max_blocks, plan->ncolblk[col]);
        {% endif %}

    int reduction_bytes = 0;
    int reduction_size = 0;

        {% for arg in lh.args|gbl|reduction %}
            {% call opt_if(arg) %}
    reduction_bytes += ROUND_UP(max_blocks * {{arg.dim}} * sizeof({{arg.typ}}));
    reduction_size   = MAX(reduction_size, sizeof({{arg.typ}}));
            {% endcall %}
        {% endfor %}

    opp_reallocReductArrays(reduction_bytes);
    reduction_bytes = 0;

        {% for arg in lh.args|gbl|reduction %}
            {% call opt_if(arg) %}
    args[{{arg.id}}].data   = OPP_reduct_h + reduction_bytes;
    args[{{arg.id}}].data_d = OPP_reduct_d + reduction_bytes;

    for (int b = 0; b < max_blocks; ++b) {
        for (int d = 0; d < {{arg.dim}}; ++d)
            (({{arg.typ}} *)args[{{arg.id}}].data)[b * {{arg.dim}} + d] = {% if arg.access_type == OP.AccessType.INC -%}
                {{arg.typ}}_ZERO
            {%- else -%}
                arg{{arg.id}}_host_data[d]
            {%- endif %};
    }

    reduction_bytes += ROUND_UP(max_blocks * {{arg.dim}} * sizeof({{arg.typ}}));
            {% endcall %}
        {% endfor %}

    opp_mvReductArraysToDevice(reduction_bytes);
    {% endif %}
{% endblock %}

{% macro kernel_call(shared_size) %}
opp_dev_{{lh.kernel}}<<<num_blocks, block_size
{{-(", %s" % shared_size) if lh.args|gbl|reduction|length > 0}}>>>(
    {% for dat in lh.dats %}
    ({{dat.typ}} *)args[{{dat.arg_id}}].data_d,    // {{dat.ptr}}
    {% endfor %}
    (OPP_INT *)args[{{lh.args|length}}].data_d,    // p2c_map
    (OPP_INT *)c2c_map->map_d,    // c2c_map
    {% for map in lh.maps %}
    args[{{map.arg_id}}].map_data_d,    // {{map.ptr}}
    {% endfor %}
    {% for arg in lh.args|gbl %}
    ({{arg.typ}} *)args[{{arg.id}}].data_d,
    {% endfor %}
    (OPP_INT *)set->particle_remove_count_d,
    (OPP_INT *)OPP_remove_particle_indices_d,
    (OPP_INT *)OPP_move_particle_indices_d,
    (OPP_INT *)OPP_move_cell_indices_d,
    (OPP_INT *)OPP_move_count_d,
    {% for extra_arg in varargs %}
    {{extra_arg}}{{"," if not loop.last}}
    {% endfor %}
);
{%- endmacro %}

{% macro seg_red_kernel_call(shared_size) %}
opp_dev_sr_{{lh.kernel}}<<<num_blocks, block_size{{-(", %s" % shared_size) if lh.args|gbl|reduction|length > 0}}>>>( 
    {% for dat in lh.dats %}
    ({{dat.typ}} *)args[{{dat.arg_id}}].data_d,     // {{dat.ptr}}
    {% endfor %}
    (OPP_INT *)args[{{lh.args|length}}].data_d,    // p2c_map
    (OPP_INT *)c2c_map->map_d,    // c2c_map
    {% for map in lh.maps %}
    args[{{map.arg_id}}].map_data_d,     // {{map.ptr}}
    {% endfor %}
    {% for arg in lh.args|gbl %}
    ({{arg.typ}} *)args[{{arg.id}}].data_d,
    {% endfor %}
    (OPP_INT *)set->particle_remove_count_d,
    (OPP_INT *)OPP_remove_particle_indices_d,
    (OPP_INT *)OPP_move_particle_indices_d,
    (OPP_INT *)OPP_move_cell_indices_d,
    (OPP_INT *)OPP_move_count_d,
    {% for dat in lh.dats %}
        {% if dat is indirect_reduction(lh) %}
    opp_get_dev_raw_ptr<{{dat.typ}}>(sr_dat{{dat.id}}_values_dv),     // sr values for {{dat.ptr}}
    opp_get_dev_raw_ptr<OPP_INT>(sr_dat{{dat.id}}_keys_dv),     // sr keys for {{dat.ptr}}
        {% endif %}
    {% endfor %}
    {% for extra_arg in varargs %}
    {{extra_arg}}{{"," if not loop.last}}
    {% endfor %}
);
{%- endmacro %}

{% block host_loop %}
    {% if lh.args|gbl|reduction|length <= 0 %}
        num_blocks = (OPP_iter_end - OPP_iter_start - 1) / block_size + 1;
    {% endif %}

    {% if lh is indirect and lh.args|dat|indirect|reduction|length > 0 and config.atomics and config.seg_red %}
        if (!opp_params->get<OPP_BOOL>("use_reg_red")) // Do atomics ----------       
    {% endif %}
    {% if lh is direct or config.atomics %}
        {
            {{kernel_call("(reduction_size * block_size)",
                "OPP_iter_start", "OPP_iter_end")|indent(12)}}
        }
    {% endif %}
    {% if lh is indirect and lh.args|dat|indirect|reduction|length > 0 and config.atomics and config.seg_red %}     
        else // Do segmented reductions ----------       
    {% endif %}
    {% if lh is indirect and lh.args|dat|indirect|reduction|length > 0 and config.seg_red %}
        {
            opp_mem::dev_copy_to_symbol<OPP_INT>(opp_k{{kernel_idx}}_sr_set_stride_d, &opp_k{{kernel_idx}}_sr_set_stride, &set->size, 1);

        {% for arg in lh.args|dat|indirect|reduction|not_already_mapped(lh) %}
            size_t operating_size_dat{{arg.dat_id}} = 0, resize_size_dat{{arg.dat_id}} = 0;
        {% endfor %}

        {% for arg in lh.args|dat|indirect|reduction %}
            operating_size_dat{{arg.dat_id}} += (size_t)1;
            resize_size_dat{{arg.dat_id}} += (size_t)1;
        {% endfor %}

        {% for arg in lh.args|dat|indirect|reduction|not_already_mapped(lh) %}
            operating_size_dat{{arg.dat_id}} *= (size_t)(set->size);
            resize_size_dat{{arg.dat_id}} *= (size_t)(set->set_capacity);
        {% endfor %}

            // Resize the key/value device arrays only if current vector is small
            opp_profiler->start("SRM_Resize");
        {% for arg in lh.args|dat|indirect|reduction|not_already_mapped(lh) %}
            if (resize_size_dat{{arg.dat_id}} > sr_dat{{arg.dat_id}}_keys_dv.size()) {
                sr_dat{{arg.dat_id}}_keys_dv.resize(resize_size_dat{{arg.dat_id}}, 0);
                sr_dat{{arg.dat_id}}_keys_dv2.resize(resize_size_dat{{arg.dat_id}}, 0);
                sr_dat{{arg.dat_id}}_values_dv.resize(resize_size_dat{{arg.dat_id}} * (args[{{arg.id}}].dat->dim), 0);
                sr_dat{{arg.dat_id}}_values_dv2.resize(resize_size_dat{{arg.dat_id}} * (args[{{arg.id}}].dat->dim), 0);
            }
        {% endfor %}
            opp_profiler->end("SRM_Resize");

            // Reset the key/value device arrays
            opp_profiler->start("SRM_Init");
        {% for arg in lh.args|dat|indirect|reduction|not_already_mapped(lh) %}
            opp_k{{kernel_idx}}::reset_OPP_INT_values<<<num_blocks, block_size>>>(
                opp_get_dev_raw_ptr<OPP_INT>(sr_dat{{arg.dat_id}}_keys_dv), 0, sr_dat{{arg.dat_id}}_keys_dv.size());
            opp_k{{kernel_idx}}::sequence_OPP_INT_values<<<num_blocks, block_size>>>(
                opp_get_dev_raw_ptr<OPP_INT>(sr_dat{{arg.dat_id}}_keys_dv2), 0, sr_dat{{arg.dat_id}}_keys_dv2.size());
            
            const int num_blocks2 = (sr_dat{{arg.dat_id}}_values_dv.size() - 1) / block_size + 1;
            opp_k{{kernel_idx}}::reset_{{lh.dat(arg).typ}}_values<<<num_blocks2, block_size>>>(
                opp_get_dev_raw_ptr<{{lh.dat(arg).typ}}>(sr_dat{{arg.dat_id}}_values_dv), 0, sr_dat{{arg.dat_id}}_values_dv.size());
            // opp_k{{kernel_idx}}::reset_{{lh.dat(arg).typ}}_values<<<num_blocks2, block_size>>>(
            //     opp_get_dev_raw_ptr<{{lh.dat(arg).typ}}>(sr_dat{{arg.dat_id}}_values_dv2), 0, sr_dat{{arg.dat_id}}_values_dv2.size());
            OPP_DEVICE_SYNCHRONIZE();
        {% endfor %}
            opp_profiler->end("SRM_Init");

            // Create key/value pairs
            opp_profiler->start("SRM_CrKeyVal");
            {{seg_red_kernel_call("(reduction_size * block_size)",
                "OPP_iter_start", "OPP_iter_end")|indent(12)}}
            OPP_DEVICE_SYNCHRONIZE();
            opp_profiler->end("SRM_CrKeyVal");

        {% for arg in lh.args|dat|indirect|reduction|not_already_mapped(lh) %}
            // Sort by keys to bring the identical keys together and store the order in sr_dat{{arg.dat_id}}_keys_dv2
            opp_profiler->start("SRM_SortByKey");
            thrust::sort_by_key(thrust::device,
                sr_dat{{arg.dat_id}}_keys_dv.begin(), sr_dat{{arg.dat_id}}_keys_dv.begin() + operating_size_dat{{arg.dat_id}}, 
                sr_dat{{arg.dat_id}}_keys_dv2.begin());
            opp_profiler->end("SRM_SortByKey"); 

            // Sort values according to sr_dat{{arg.dat_id}}_keys_dv2
            opp_profiler->start("SRM_AssignByKey"); 
            opp_k{{kernel_idx}}::assign_values_by_key<<<num_blocks, block_size>>>(
                opp_get_dev_raw_ptr<OPP_INT>(sr_dat{{arg.dat_id}}_keys_dv2),
                opp_get_dev_raw_ptr<{{lh.dat(arg).typ}}>(sr_dat{{arg.dat_id}}_values_dv),
                opp_get_dev_raw_ptr<{{lh.dat(arg).typ}}>(sr_dat{{arg.dat_id}}_values_dv2),
                0, operating_size_dat{{arg.dat_id}}, {{lh.dat(arg).dim}});
            OPP_DEVICE_SYNCHRONIZE();
            opp_profiler->end("SRM_AssignByKey"); 

            // Compute the unique keys and their corresponding values
            opp_profiler->start("SRM_RedByKey");
            auto new_end = thrust::reduce_by_key(thrust::device,
                sr_dat{{arg.dat_id}}_keys_dv.begin(), sr_dat{{arg.dat_id}}_keys_dv.begin() + operating_size_dat{{arg.dat_id}},
                sr_dat{{arg.dat_id}}_values_dv2.begin(),
                sr_dat{{arg.dat_id}}_keys_dv2.begin(),
                sr_dat{{arg.dat_id}}_values_dv.begin());  
            const size_t reduced_size = (new_end.first - sr_dat{{arg.dat_id}}_keys_dv2.begin());

            {% if lh.dat(arg).dim > 1 %}
            for (int d = 1; d < {{lh.dat(arg).dim}}; ++d) {
                auto new_end = thrust::reduce_by_key(thrust::device,
                    sr_dat{{arg.dat_id}}_keys_dv.begin(), sr_dat{{arg.dat_id}}_keys_dv.begin() + operating_size_dat{{arg.dat_id}},
                    sr_dat{{arg.dat_id}}_values_dv2.begin() + d * opp_k{{kernel_idx}}_sr_set_stride,
                    thrust::make_discard_iterator(), sr_dat{{arg.dat_id}}_values_dv.begin() + d * opp_k{{kernel_idx}}_sr_set_stride);     
            }      
            {% endif %}
            opp_profiler->end("SRM_RedByKey");

            // Assign reduced values to the nodes using keys/values
            opp_profiler->start("SRM_Assign");
            num_blocks = reduced_size / block_size + 1;
            for (int d = 0; d < {{lh.dat(arg).dim}}; ++d) { // Could invoke the kernel once and have all dims updated with that
                opp_k{{kernel_idx}}::assign_values<<<num_blocks, block_size>>> ( 
                    opp_get_dev_raw_ptr<OPP_INT>(sr_dat{{arg.dat_id}}_keys_dv2),
                    (opp_get_dev_raw_ptr<{{lh.dat(arg).typ}}>(sr_dat{{arg.dat_id}}_values_dv) + d * opp_k{{kernel_idx}}_sr_set_stride),
                    (({{lh.dat(arg).typ}} *) args[{{arg.dat_id}}].data_d) + d * opp_k{{kernel_idx}}_dat{{arg.dat_id}}_stride,
                    0, reduced_size);
            }
            OPP_DEVICE_SYNCHRONIZE();
            opp_profiler->end("SRM_Assign");

            // Last: clear the thrust vectors if this is the last iteration (avoid crash)
            opp_profiler->start("SRM_Clear");
            if (opp_params->get<OPP_INT>("num_steps") == (OPP_main_loop_iter + 1)) {
                OPP_DEVICE_SYNCHRONIZE();
                sr_dat{{arg.dat_id}}_values_dv.clear(); sr_dat{{arg.dat_id}}_values_dv.shrink_to_fit();
                sr_dat{{arg.dat_id}}_keys_dv.clear(); sr_dat{{arg.dat_id}}_keys_dv.shrink_to_fit();
            } 
            opp_profiler->end("SRM_Clear");
        {% endfor %}
        }    
    {% endif %}

    } while (opp_finalize_particle_move(set)); 

{% endblock %}

{% block host_epilogue %}
    {% if lh.args|gbl|read_write|length > 0 or lh.args|gbl|write|length > 0 %}
    mvConstArraysToHost(const_bytes);
    
        {% for arg in lh.args|gbl if arg is write or arg is read_write %}
    for (int d = 0; d < {{arg.dim}}; ++d)
        arg{{arg.id}}_host_data[d]; = (({{arg.typ}} *)args[{{arg.id}}].data)[d];
        {% endfor %}
    {% endif %}
    {% for arg in lh.args|gbl|read_or_write %}
    args[{{arg.id}}].data = (char *)arg{{arg.id}}_host_data;{{"\n" if loop.last}}
    {% endfor %}
    {% for arg in lh.args|gbl|reduction %}
    for (int b = 0; {{opt_cond_comp(arg)}}b < max_blocks; ++b) {
        for (int d = 0; d < {{arg.dim}}; ++d)
        {% if arg.access_type == OP.AccessType.INC %}
            arg{{arg.id}}_host_data[d] += (({{arg.typ}} *)args[{{arg.id}}].data)[b * {{arg.dim}} + d];
        {% elif arg.access_type in [OP.AccessType.MIN, OP.AccessType.MAX] %}
            arg{{arg.id}}_host_data[d] = {{arg.access_type.name-}}
                (arg{{arg.id}}_host_data[d], (({{arg.typ}} *)args[{{arg.id}}].data)[b * {{arg.dim}} + d]);
        {% endif %}
    }

    {% endfor %}
    {% for arg in lh.args|gbl|reduction %}
        {% call opt_if(arg) %}
    args[{{arg.id}}].data = (char *)arg{{arg.id}}_host_data;
    opp_mpi_reduce(&args[{{arg.id}}], arg{{arg.id}}_host_data);
        {% endcall %}

    {% endfor %}
    opp_set_dirtybit_grouped(nargs, args, Device_GPU);
    OPP_DEVICE_SYNCHRONIZE();   
    {% if lh is double_indirect_reduc %}

#ifdef USE_MPI    
    opp_exchange_double_indirect_reductions_device(nargs, args);
    opp_complete_double_indirect_reductions_device(nargs, args);
#endif
    {% endif %} 
{{super()}}
{% endblock %}

{% block dh_init_wrapper %}
{% if lh.dh_loop_required %}
void opp_init_direct_hop_cg(double grid_spacing, const opp_dat c_gbl_id, const opp::BoundingBox& b_box, 
    opp_map c2c_map, opp_map p2c_map,
    {% for arg in lh.args %}
    opp_arg arg{{arg.id}}{{"," if not loop.last}} // {% if arg is dat %}{{lh.dat(arg).ptr}} {% endif -%} | OPP_{{arg.access_type.name}}
    {% endfor %}
) {
    opp_profiler->start("Setup_Mover");
    
    opp_profiler->end("Setup_Mover");
}
{% endif %}
{% endblock %}
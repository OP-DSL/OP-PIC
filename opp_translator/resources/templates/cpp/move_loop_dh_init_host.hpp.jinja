{%- macro arg_to_pointer_dh(arg, lh) %}
    {%- if arg.id == 0 -%}
            (const OPP_REAL*)&point,
    {%- elif arg is gbl %}
        {%- set cast = arg.typ -%}
        ({{cast}} *)args[{{arg.id}}].data{%-if arg.id+1 != lh.args|length-%},{%-endif-%}
    {%- else -%}

        {%- if arg is direct -%}
            {%- set offset = "" -%}
        {%- elif arg is double_indirect -%}
            {%- set offset = " + (map%s[%d] * %d)" % (arg.map_id, arg.map_idx, lh.dat(arg).dim) -%}
        {%- elif arg is indirect -%}
            {%- set offset = " + (temp_ci * %d)" % (lh.dat(arg).dim) -%}
        {%- endif -%}

        {# 0 is OP.AccessType.READ #}
        {%- if arg.access_type.value == 0 -%} 
            (const {{lh.dat(arg).typ}} *)args[{{arg.id}}].data{{offset}}{%-if arg.id+1 != lh.args|length-%},{%-endif%} // {% if arg is dat -%}{{lh.dat(arg).ptr}} {%- endif -%} | OPP_{{arg.access_type.name}}
        {%- else -%}
            arg{{arg.id}}_temp{%-if arg.id+1 != lh.args|length-%},{%-endif%} // {% if arg is dat -%}{{lh.dat(arg).ptr}} {%- endif -%} | OPP_{{arg.access_type.name}}
        {%- endif -%}
    {%- endif -%}
{%- endmacro -%}

{% macro init_dh(lh, kernel_idx, is_omp) %}

void opp_init_direct_hop_cg(double grid_spacing, const opp_dat c_gbl_id, const opp::BoundingBox& b_box, 
    opp_map c2c_map, opp_map p2c_map,
    {% for arg in lh.args %}
    opp_arg arg{{arg.id}}{{"," if not loop.last}} // {% if arg is dat %}{{lh.dat(arg).ptr}} {% endif -%} | OPP_{{arg.access_type.name}}
    {% endfor %}
) {
    opp_profiler->start("Setup_Mover");
    
    useGlobalMove = opp_params->get<OPP_BOOL>("opp_global_move");

    if (useGlobalMove) {

        const int nargs = {{lh.args|length +1}};
        opp_arg args[nargs];

        {% for arg in lh.args %}
        args[{{loop.index0}}] = {{arg_dat_redef(arg) if lh.args[arg.id] is vec else "arg%d" % arg.id}};
        {% endfor %}
        args[{{lh.args|length}}] = opp_arg_dat(p2c_map->p2c_dat, OPP_RW); // required to make dirty or should manually make it dirty

#ifdef USE_MPI
        opp_mpi_halo_exchanges(c_gbl_id->set, nargs, args);

        comm = std::make_shared<opp::Comm>(MPI_COMM_WORLD);
        globalMover = std::make_unique<opp::GlobalParticleMover>(comm->comm_parent);

        opp_mpi_halo_wait_all(nargs, args);
#endif

        boundingBox = std::make_shared<opp::BoundingBox>(b_box);
        cellMapper = std::make_shared<opp::CellMapper>(boundingBox, grid_spacing, comm);

        const int c_set_size = c_gbl_id->set->size;
    {% if is_omp %}
        {% set prefix1="OPP_INT* "%}
        {% set prefix2="char "%}
        {% set prefix3="bool "%}
    {% endif %}

        // lambda function for dh mesh search loop
        auto all_cell_checker = [&](const opp_point& point, int& cid) {          
    {% for arg in lh.args|dat %}
        {% if arg.access_type.value in [1, 3, 4, 5, 2] %} 
            // we dont want to change the original arrays during dh mesh generation, hence duplicate except OPP_READ
            {{lh.dat(arg).typ}} arg{{arg.id}}_temp[{{lh.dat(arg).dim}}];
        {%- endif %}
    {%- endfor +%}
            for (int ci = 0; ci < c_set_size; ++ci) {
                {{prefix2}}opp_move_status_flag = OPP_NEED_MOVE;  
                {{prefix3}}opp_move_hop_iter_one_flag = true;

                int temp_ci = ci; // we dont want to get iterating ci changed within the kernel, hence get a copy
                
                {{prefix1}}opp_p2c = &(temp_ci);           
                {{prefix1}}opp_c2c = &((c2c_map->map)[temp_ci * {{lh.c2c_map.dim}}]);
    {% if lh is indirect %}
        {% for map in lh.maps %}
                const OPP_INT *map{{map.id}} = args[{{map.arg_id}}].map_data + (temp_ci * {{map.dim}});
        {%- endfor %}   
    {%- endif %}    
    {%- for arg in lh.args|dat %}
        {% if arg.access_type.value == 2 %} 

            {%- if arg is double_indirect -%}
            {%- set offset = " + (map%s[%d] * %d)" % (arg.map_id, arg.map_idx, lh.dat(arg).dim) -%}
            {%- elif arg is indirect -%}
            {%- set offset = " + (temp_ci * %d)" % (lh.dat(arg).dim) -%}
            {%- endif %}
                // arg{{arg.id}} is OPP_RW, hence get a copy just incase
                std::memcpy(&arg{{arg.id}}_temp, ({{lh.dat(arg).typ}} *)args[{{arg.id}}].data{{offset}}, (sizeof({{lh.dat(arg).typ}}) * {{lh.dat(arg).dim}}));
        {% endif %}
    {%- endfor %}

                opp_k{{kernel_idx}}::{{lh.kernel}}(
    {% if is_omp %}
                    opp_move_status_flag, opp_move_hop_iter_one_flag, opp_c2c, opp_p2c, 
    {% endif %}
    {% for arg in lh.args %}
                    {{arg_to_pointer_dh(arg,lh)}}
    {% endfor %}
                );
                if (opp_move_status_flag == OPP_MOVE_DONE) {       
                    cid = temp_ci;
                    break;
                }
            }
        };
        
        if (opp_params->get<OPP_BOOL>("opp_dh_data_generate")) {
            cellMapper->generateStructuredMesh(c_gbl_id->set, c_gbl_id, all_cell_checker);
        }
        else {
            cellMapper->generateStructuredMeshFromFile(c_gbl_id->set, c_gbl_id);  
        }
        
        opp_profiler->reg("GlbToLocal");
        opp_profiler->reg("GblMv_Move");
        opp_profiler->reg("GblMv_AllMv");
    }

    opp_profiler->end("Setup_Mover");
}
{% endmacro %}
